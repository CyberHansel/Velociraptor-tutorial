How to add comment in VQL

1.) -- This is a single-line comment or # This is a single-line comment // This is single line comment
2.) /*
This is 
a multi-line comment
*/

######################################################################################
LABELS
When we add labels, we can specifie to run hunts only in those systems that have specific label. Also we can label systems

######################################################################################
Find files or attachemnts in all systems

* Hunt Artifact: Windows.Search.FileFinder 
* Configure Parameters > SearchFilesGlob > C:\Users\**\Security_Protocol*   #search in every Users directory for everything that matches Security_Protocol*
* Edit Notebook for specific results, notebook takes hunt results and you can edit how you want to see them. Uses VQL language
---- Data to paste in Notebook ----
SELECT Fqdn,FullPath,BTime AS CreatedTime,MTime as ModifiedTime, Hash,  -- selects specific collumns we want to see in results. MTime as ModifiedTime - renames Mtime to ModifiedTime. 
label(client_id=ClientId, labels="phish_victim", op="set") // label all systems that came in results with label "phish_victim"
FROM source()
----
Diskette symbol - save notebook, its gonna reexecute querrie and show new results that we want. Now when we check systems there will be labels "phish_victim".

######################################################################################
How to identify all users in example all devices that were labeled as phish victims.



######################################################################################
Find possible lateral movement using the usernames of the phish victims

* Hunt Artifact: Windows.EventLogs.RDPAuth
* Configure Parameters > UserNameregex > .*(Jean\.Owen|Albert\.Willoughby|Chad\.Chan|Anna\.Ward).*     #These are the username we had on those systems like Jean\.Owen and Albert\.Willoughby its like username is Jean.Owen and \ escapes .
* Edit Notebook
----
SELECT EventTime,Computer,Channel,EventID,UserName,LogonType,SourceIP,Description,Message,Fqdn FROM source()
WHERE (                                                                       // excluded logons of the user on their own system
(UserName =~ "Chad.Chan" AND NOT Computer =~ "ACC-01")                        //Chad is user of ACC-01 systems, so we dont care about logging on his system
OR (UserName =~ "Jean.Owen" AND NOT Computer =~ "ACC-05")
OR (UserName =~ "Albert.Willoughby" AND NOT Computer =~ "ACC-09")
OR (UserName =~ "Anna.Ward" AND NOT Computer =~ "ACC-04")
)
AND NOT EventID = 4634 // less interested in logoff events
AND NOT (Computer =~ "dc" OR Computer =~ "exchange" OR Computer =~ "fs1")    //except DC logins, exchange server and File server fs1
ORDER BY EventTime
----
!!! When pasting this in Notebook there can be non printable characters at the end of line like space! Delete empty spaces at end !!!
At the end we have all logons by the users that dont use that system
######################################################################################
Find potentially compromised systems by baselining all running processes in the environment. This notebook returns processes marked as untrusted by Authenticode.

* Hunt Artifact: Windows.System.Pslist     #show all processes in systems
* Notebook:
----
SELECT Name,Exe,CommandLine,Hash.SHA256 AS SHA256, Authenticode.Trusted, Username, Fqdn, count() AS Count FROM source()  
//count() AS Count = counts number of occurences that it finds in each process
WHERE Authenticode.Trusted = "untrusted" // unsigned binaries, rare occurence to find digitally sign malware
// List of environment-specific processes to exclude, those are known good binaries
AND NOT Exe = "C:\\Program Files\\filebeat-rss\\filebeat.exe"
AND NOT Exe = "C:\\Program Files\\filebeat\\filebeat.exe"
AND NOT Exe = "C:\\Program Files\\winlogbeat-rss\\winlogbeat.exe"
AND NOT Exe = "C:\\Program Files\\winlogbeat\\winlogbeat.exe"
AND NOT Exe = "C:\\user-automation\\user.exe"
AND NOT Exe = "C:\\salt\\bin\\python.exe"
// Stack for prevalence analysis - group them by their full path executables, like path from what exe process was launched
GROUP BY Exe
// Sort results ascending - and order them by their prevelance (how common they are found)
ORDER BY Count
----

Notebook2: VIRUS TOTAL !!!
Leverage VirusTotal to quickly check untrusted processes for detections. Be mindful that free VT API is limited to 4 lookups / min & 500 / day so we'll be as efficient as possible with what we query against VT.
* Hunt Artifact: Windows.System.Pslist
----
// Get a free VT api key
LET VTKey <= "430298509435bab9b89ab89ab89ab8ba98b"
// Build the list of untrusted processes first
Let Results = SELECT Name,CommandLine,Exe,Hash.SHA256 AS SHA256, count() AS Count FROM source()
WHERE Authenticode.Trusted = "untrusted"
AND SHA256 // only entries with the required SHA256
// List of environment-specific processes to exclude
AND NOT Exe = "C:\\user-automation\\user.exe"
GROUP BY Exe,SHA256
// Now combine the previous query with the Server Enrichment query
SELECT *, {SELECT VTRating FROM Artifact.Server.Enrichment.Virustotal(VirustotalKey=VTKey, Hash=SHA256) } AS VTResults FROM foreach(row=Results) WHERE Count < 10
ORDER BY VTResults DESC
----

######################################################################################
How the malware processes tkg and Security_Protocol was launched

* Hunt Artifact: Generic.System.Pstree 
* Parameters > ProcessNameRegex>  .*(tkg|mshta|Security_Protocol).*   // tkg or security protocol. | is OR. And both with wildcards

######################################################################################
Find potential persistance - Startup Autoruns

* Hunt Artifact: Windows.Sys.StartupItems
* Notebook:
----
LET Results = SELECT count() AS Count, Fqdn, Name, FullPath, Command FROM source()
// filter common FPs
WHERE NOT FullPath =~ "bginfo.lnk" // excluding false positives
AND NOT FullPath =~ "desktop.ini"
AND NOT FullPath =~ "Outlook.lnk"
AND NOT FullPath =~ "chrome.lnk"
AND NOT (Name =~ "OneDrive" AND FullPath =~ "OneDrive" AND Command =~ "OneDrive")
// end common FPs
GROUP BY Name, FullPath, Command // stack them if we have autoruns entry with the same name path and commands, cos they are same entry
SELECT * FROM Results
WHERE Count < 10    // now show only those who are fewer than 10 systems in my environment
ORDER BY Count // sorts ascending
----
######################################################################################
Find potential persistance - Scheduled tasks

* Hunt Artifact: Windows.System.TaskScheduler
* Notebook:
----
LET Results = SELECT FullPath,Command,Arguments,Fqdn, count() AS Count FROM source()
WHERE Command AND Arguments
AND NOT Command =~ "OneDriveStandaloneUpdater.exe"
AND NOT (Command = "C:\\Windows\\System32\\Essentials\\RunTask.exe" AND FullPath =~ "Essentials")
AND NOT Command =~ "MpCmdRun.exe"
AND NOT Arguments =~ "sildailycollector.vbs"
AND NOT Command = "C:\\Windows\\system32\\vssadmin.exe"
AND NOT FullPath =~ "BPA Scheduled Scan"
AND NOT Arguments =~ "CheckDatabaseRedundancy"
AND NOT Arguments =~ "silcollector.cmd"
GROUP BY FullPath,Command,Arguments
SELECT * FROM Results
WHERE Count < 5
ORDER BY Count // sorts ascending
----

!!! cmstp.exe     is sign binary proxy execution, ifits only in 1 system its doggy, cos CobaltStrike uses this !!!
######################################################################################
Find potential persistance - Sysinternals Autorunsc to hunt for potential persistence mechanisms

* Hunt Artifact: Windows.Sysinternals.Autoruns
----
LET Results = SELECT count() AS Count, Fqdn, Entry,Category,Profile,Description,`Image Path` AS ImagePath,`Launch String` AS LaunchString,`SHA-256` AS SHA256 FROM source()
WHERE NOT Signer
AND Enabled = "enabled"
GROUP BY ImagePath,LaunchString
SELECT * FROM Results
WHERE Count < 5 // return entries present on fewer than 5 systems
ORDER BY Count
----
######################################################################################
Find all systems that have certain findings of malware from previous

* Hunt Artifact: Windows.Search.FileFinder 
* Configure Parameters > SearchFilesGlobTable > in each Glob row 
C:\**\msxsl.exe
C:\**\*.hta        // these are pretty rare, so in any place on disc
C:\**\drivers\svchost.exe   // another persistance mechanish from autoruns results, drivers is not apropriate home for svchost.exe
C:\**\tkg.exe
C:\**\Security_Protocol*
C:\**\XKnqbpzl.txt   // shady txt file that was argument for cmstp.exe that associated with CobaltStrike

* Notebook:
----
SELECT Fqdn,FullPath,MTime AS ModifiedTime,BTime as CreationTime, Hash,
label(client_id=ClientId, labels="compromised", op="set") // label all systems with detections
FROM source()
----

######################################################################################


######################################################################################


######################################################################################


######################################################################################


######################################################################################














