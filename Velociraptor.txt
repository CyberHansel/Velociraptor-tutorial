How to add comment in VQL

1.) -- This is a single-line comment or # This is a single-line comment // This is single line comment
2.) /*
This is 
a multi-line comment
*/

######################################################################################
LABELS
When we add labels, we can specifie to run hunts only in those systems that have specific label. Also we can label systems

Search for label compromised
In device inventory upper corner ar search write:
label:compromised

######################################################################################
Find files or attachemnts in all systems

* Hunt Artifact: Windows.Search.FileFinder 
* Configure Parameters > SearchFilesGlob > C:\Users\**\Security_Protocol*   #search in every Users directory for everything that matches Security_Protocol*
* Edit Notebook for specific results, notebook takes hunt results and you can edit how you want to see them. Uses VQL language
---- Data to paste in Notebook ----
SELECT Fqdn,FullPath,BTime AS CreatedTime,MTime as ModifiedTime, Hash,  -- selects specific collumns we want to see in results. MTime as ModifiedTime - renames Mtime to ModifiedTime. 
label(client_id=ClientId, labels="phish_victim", op="set") // label all systems that came in results with label "phish_victim"
FROM source()
----
Diskette symbol - save notebook, its gonna reexecute querrie and show new results that we want. Now when we check systems there will be labels "phish_victim".

######################################################################################
How to identify all users in example all devices that were labeled as phish victims.



######################################################################################
Find possible lateral movement using the usernames of the phish victims

* Hunt Artifact: Windows.EventLogs.RDPAuth
* Configure Parameters > UserNameregex > .*(Jean\.Owen|Albert\.Willoughby|Chad\.Chan|Anna\.Ward).*     #These are the username we had on those systems like Jean\.Owen and Albert\.Willoughby its like username is Jean.Owen and \ escapes .
* Edit Notebook
----
SELECT EventTime,Computer,Channel,EventID,UserName,LogonType,SourceIP,Description,Message,Fqdn FROM source()
WHERE (                                                                       // excluded logons of the user on their own system
(UserName =~ "Chad.Chan" AND NOT Computer =~ "ACC-01")                        //Chad is user of ACC-01 systems, so we dont care about logging on his system
OR (UserName =~ "Jean.Owen" AND NOT Computer =~ "ACC-05")
OR (UserName =~ "Albert.Willoughby" AND NOT Computer =~ "ACC-09")
OR (UserName =~ "Anna.Ward" AND NOT Computer =~ "ACC-04")
)
AND NOT EventID = 4634 // less interested in logoff events
AND NOT (Computer =~ "dc" OR Computer =~ "exchange" OR Computer =~ "fs1")    //except DC logins, exchange server and File server fs1
ORDER BY EventTime
----
!!! When pasting this in Notebook there can be non printable characters at the end of line like space! Delete empty spaces at end !!!
At the end we have all logons by the users that dont use that system
######################################################################################
Find potentially compromised systems by baselining all running processes in the environment. This notebook returns processes marked as untrusted by Authenticode.

* Hunt Artifact: Windows.System.Pslist     #show all processes in systems
* Notebook:
----
SELECT Name,Exe,CommandLine,Hash.SHA256 AS SHA256, Authenticode.Trusted, Username, Fqdn, count() AS Count FROM source()  
//count() AS Count = counts number of occurences that it finds in each process
WHERE Authenticode.Trusted = "untrusted" // unsigned binaries, rare occurence to find digitally sign malware
// List of environment-specific processes to exclude, those are known good binaries
AND NOT Exe = "C:\\Program Files\\filebeat-rss\\filebeat.exe"
AND NOT Exe = "C:\\Program Files\\filebeat\\filebeat.exe"
AND NOT Exe = "C:\\Program Files\\winlogbeat-rss\\winlogbeat.exe"
AND NOT Exe = "C:\\Program Files\\winlogbeat\\winlogbeat.exe"
AND NOT Exe = "C:\\user-automation\\user.exe"
AND NOT Exe = "C:\\salt\\bin\\python.exe"
// Stack for prevalence analysis - group them by their full path executables, like path from what exe process was launched
GROUP BY Exe
// Sort results ascending - and order them by their prevelance (how common they are found)
ORDER BY Count
----

Notebook2: VIRUS TOTAL !!!
Leverage VirusTotal to quickly check untrusted processes for detections. Be mindful that free VT API is limited to 4 lookups / min & 500 / day so we'll be as efficient as possible with what we query against VT.
* Hunt Artifact: Windows.System.Pslist
----
// Get a free VT api key
LET VTKey <= "430298509435bab9b89ab89ab89ab8ba98b"
// Build the list of untrusted processes first
Let Results = SELECT Name,CommandLine,Exe,Hash.SHA256 AS SHA256, count() AS Count FROM source()
WHERE Authenticode.Trusted = "untrusted"
AND SHA256 // only entries with the required SHA256
// List of environment-specific processes to exclude
AND NOT Exe = "C:\\user-automation\\user.exe"
GROUP BY Exe,SHA256
// Now combine the previous query with the Server Enrichment query
SELECT *, {SELECT VTRating FROM Artifact.Server.Enrichment.Virustotal(VirustotalKey=VTKey, Hash=SHA256) } AS VTResults FROM foreach(row=Results) WHERE Count < 10
ORDER BY VTResults DESC
----

######################################################################################
How the malware processes tkg and Security_Protocol was launched

* Hunt Artifact: Generic.System.Pstree 
* Parameters > ProcessNameRegex>  .*(tkg|mshta|Security_Protocol).*   // tkg or security protocol. | is OR. And both with wildcards

######################################################################################
Find potential persistance - Startup Autoruns

* Hunt Artifact: Windows.Sys.StartupItems
* Notebook:
----
LET Results = SELECT count() AS Count, Fqdn, Name, FullPath, Command FROM source()
// filter common FPs
WHERE NOT FullPath =~ "bginfo.lnk" // excluding false positives
AND NOT FullPath =~ "desktop.ini"
AND NOT FullPath =~ "Outlook.lnk"
AND NOT FullPath =~ "chrome.lnk"
AND NOT (Name =~ "OneDrive" AND FullPath =~ "OneDrive" AND Command =~ "OneDrive")
// end common FPs
GROUP BY Name, FullPath, Command // stack them if we have autoruns entry with the same name path and commands, cos they are same entry
SELECT * FROM Results
WHERE Count < 10    // now show only those who are fewer than 10 systems in my environment
ORDER BY Count // sorts ascending
----
######################################################################################
Find potential persistance - Scheduled tasks

* Hunt Artifact: Windows.System.TaskScheduler
* Notebook:
----
LET Results = SELECT FullPath,Command,Arguments,Fqdn, count() AS Count FROM source()
WHERE Command AND Arguments
AND NOT Command =~ "OneDriveStandaloneUpdater.exe"
AND NOT (Command = "C:\\Windows\\System32\\Essentials\\RunTask.exe" AND FullPath =~ "Essentials")
AND NOT Command =~ "MpCmdRun.exe"
AND NOT Arguments =~ "sildailycollector.vbs"
AND NOT Command = "C:\\Windows\\system32\\vssadmin.exe"
AND NOT FullPath =~ "BPA Scheduled Scan"
AND NOT Arguments =~ "CheckDatabaseRedundancy"
AND NOT Arguments =~ "silcollector.cmd"
GROUP BY FullPath,Command,Arguments
SELECT * FROM Results
WHERE Count < 5
ORDER BY Count // sorts ascending
----

!!! cmstp.exe     is sign binary proxy execution, ifits only in 1 system its doggy, cos CobaltStrike uses this !!!
######################################################################################
Find potential persistance - Sysinternals Autorunsc to hunt for potential persistence mechanisms

* Hunt Artifact: Windows.Sysinternals.Autoruns
----
LET Results = SELECT count() AS Count, Fqdn, Entry,Category,Profile,Description,`Image Path` AS ImagePath,`Launch String` AS LaunchString,`SHA-256` AS SHA256 FROM source()
WHERE NOT Signer         // Autoruns that are not digitally sign
AND Enabled = "enabled"     // autoruns that are enabled
GROUP BY ImagePath,LaunchString
SELECT * FROM Results
WHERE Count < 5 // return entries present on fewer than 5 systems
ORDER BY Count
----
######################################################################################
Find all systems that have certain findings of malware from previous

* Hunt Artifact: Windows.Search.FileFinder 
* Configure Parameters > SearchFilesGlobTable > in each Glob row 
C:\**\msxsl.exe
C:\**\*.hta        // these are pretty rare, so in any place on disc
C:\**\drivers\svchost.exe   // another persistance mechanish from autoruns results, drivers is not apropriate home for svchost.exe
C:\**\tkg.exe
C:\**\Security_Protocol*
C:\**\XKnqbpzl.txt   // shady txt file that was argument for cmstp.exe that associated with CobaltStrike

* Notebook:   #When You have results Assign label to all systems that fount these results
----
SELECT Fqdn,FullPath,MTime AS ModifiedTime,BTime as CreationTime, Hash,
label(client_id=ClientId, labels="compromised", op="set") // label all systems with detections
FROM source()
----

######################################################################################
Look for CobaltStrike - Yara scan for cobalt processes for all systems

INFO about Windows.Detection.Yara.Process Configure parameters Fields
# ProcessRegex - chose what processes or leave . for all processes
# UploadHits tick - upload those processes to do some IR or static analysis
# !!! YaraUrl - if I have particular Yara signatures I wana run, but its hosted on github, add URL for RAW version of that Yara rule !!!

* Hunt Artifact: Windows.Detection.Yara.Process
* Configuration Parameters as is default Yara Rules include already against Cobalt strike
Cleaning up output
Notebook:
----
SELECT Fqdn, ProcessName, Pid, Rule,
label(client_id=ClientId, labels="cobaltstrike", op="set") // label all systems with detections
FROM source()
----
result found also services.exe thats legitimate process, Cobalt strike injected into that process

######################################################################################
Quarantine all impacted systems to prevent further damage. Quarantines all connections except Velociraptor connection to not lose access

* Configure Hunt >
Include condition:  Match by label
Include Labels:  compromised
* Select Artifact: Windows.Remediation.Quarantine

######################################################################################
THIS IS WHERE FORENSICS ONLY START - perform triage forensics acquisitions from infected systems
This will get most of known evidence locations, event logs, prefetch files, registry hives ... etc , etc.

* Hunt Artifact: Windows.KapeFiles.Targets (run against all systems labeled compromised)
* Configure Parameters:
Kape targets: _SANS_Triage
Notebook: none required

######################################################################################
HAYABUSA!  Will analyze entire folder full of event log, search for 15 000 known threats Sigma rules

######################################################################################
######################################################################################
######################################################################################
Finding malicious exe

1. Windows.Network.Netstat
   Windows.Network.NetstatEnriched - in Results "ProgramName" shows if program is signed by legitimate company and trusted or untrusted.
                                     is non signed will show NULL

2. Run for autoruns - Velo will automatically download sysinternals autoruns tool and run it.
                      In Hunts Log we can see what Velo did
!!! If registry key is in \Wow6432Node\ it means its 32 bit code running in 64 bit system, thats suspicious

3. Run Windows.System.Pslist > processRegex write malicious pup or anything else. We had pup4message.exe malicious process

4. See the memory used by this process - Windows.Triage.ProcessMemory #Dumps process memory and uploads into server.
   in processRegex we add pup ; part or full process name.
Dump - .dmp can be find in Velo server and clicking Uploaded Files near Results, Notebook. It then download it to browser.

Microsoft uses Microsoft Unicode, not ASCII so in hex editor. Microsoft uses like that after each ASCII character there is null byte
or 00. Thats how Microsoft stores string.

5. Use Yara Hunt: Windows.Detection.Yara.NTFS
   * Change default, that searches for    Windows/System32/kernel32\.dll$    files in  to:
   PathRegex: \.exe$
   * Also we can delete ShortHandYara rule and add:  wide:PWNED   #that will search for string PWNED in MS 16 bit Unicode
                                                or:  ascii wide:securityreport

!!! One thing about YARA if it can use directly open file trough usual Windows explorer system, it can access disc directly to open
files that are in use or in other words unavailable !!!

######################################################################################
!!! there is built in windows packet capture tool etl2pcapng #but it caprutes in strange format, but Velo converts to pcap!!!

To start packet capture we need to run it twice, 1st to start capture, then to end
1. First  Hunt: Windows.Network.PacketCapture   with parameter StartTrace ticked and Results give path to ...\NetTrace.etl file

2. Second Hunt: Windows.Network.PacketCaptur  empty parameter StartTrace and TraceFile: paste that path from results ...\NetTrace.etl
In Uploaded Files there is link to download.

3. Open with Wireshart and go to statistics > conversations
   * Some traffic goes to velo C&C server 8000 port
   * We found port 80 traffic left click > Apply as filter > Selected > A <> B (Both directions)
   * Find where it sends something Left click > Follow > TCP stream

4. Lets look at DNS cache Hunt: Windows.System.DNSCache
   In Log we can se it does iponfig/displaydns # !!! in win 10/11 cant run this before switch from automatic to manual addressing !!!

######################################################################################
To find out when some processes are launched

* Hunt: Windows.Forensic.Prefetch  #finds what has been launched recently on that machine
* Configure parameters > binaryRegex > shellbind  #its shellbind.exe malicious process

######################################################################################
Chek Windows event files  #but there was sysmon installed with Velociraptor before for getting most logs

* Hunt Windows.EventLogs.Evtx
* Configure parameters > start time from previous, like minute before and minute after
But we need to find shellbind either download and search or with Notebook VQL

######################################################################################
https://www.youtube.com/watch?v=EA40rztSOd4





   

































